jenkins:
  systemMessage: |
    Welcome to our build server.
    This Jenkins is 100% configured and managed 'as code'.
  numExecutors: 3
  scmCheckoutRetryCount: 5
  mode: NORMAL
  globalNodeProperties:
  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            description: "Jenkins administrators"
            permissions:
              - "Overall/Administer"
            entries:
              - user: "admin"
          - name: "readonly"
            description: "Read-only users"
            permissions:
              - "Overall/Read"
              - "Job/Read"
            entries:
              - user: "reader"
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "#jbcrypt:$2a$10$A8KC6NqUYjHur8Tfjmi8d.KSBanoM2yeRYRlotF.j6Ei2NpKJSAny"
        - id: "reader"
          password: "#jbcrypt:$2a$10$A8KC6NqUYjHur8Tfjmi8d.KSBanoM2yeRYRlotF.j6Ei2NpKJSAny"
jobs:
  - script: >
      folder('testJobsFromGit')
  - script: >
      pipelineJob('testJobsFromGit/test_job_from_git_jenkinsfile') {
        description('Para cargar jobs que usan archivo jenkinsfile')
        keepDependencies(false)
        properties { }
        disabled(false)
        definition {
          cpsScm {
            scm {
              git {
                remote { url('https://github.com/mvazgon/curso_jenkins.git')}
                branches ('*/cursoJenkins')
                extensions { }
                scriptPath('Jenkinsfile')
                lightweight(true)
              }
            }
          }
        }  
      }
  - script: >
      folder('testJobsFromFile')
  - script: >
      pipelineJob('testjobsFromFile/default-agent') {
        definition {
          cps {
            script("""\
              pipeline {
                agent any
                stages {
                  stage('SHOW ENV') {
                    steps {
                      script {
                        env.each { key, value -> 
                        echo "${key}: ${value}"
                         }
                      }
                    }
                  }
                  stage('DOWNLOAD PRJ') {
                    steps {
                      git 'https://github.com/mvazgon/apibuilder.git'  // Reemplaza con la URL de tu repositorio
                    }
                  }   
                  stage('CHECK SONAR PRJ') {
                      steps {
                          echo 'Simulando el análisis con SONARQUBE...'
                          // Aquí iría el comando para analizar el código con SONARQUBE
                      }
                  }
                  stage('TEST UNIT PRJ') {
                      steps {
                          echo 'Simulando la ejecución de tests unitarios...'
                          // Aquí iría el comando para ejecutar los tests unitarios
                      }
                  }
                  stage('BUILD PRJ') {
                      steps {
                          echo 'Simulando la construcción de un ejecutable Java...'
                          // Aquí iría el comando para construir el ejecutable Java
                      }
                  }
                  stage('UPLOAD JAVA PRJ') {
                      steps {
                          echo 'Simulando la subida del ejecutable Java a un registro de objetos...'
                          // Aquí iría el comando para subir el ejecutable Java al registro de objetos
                      }
                  }
                  stage('REGISTER DONE') {
                    steps {
                        echo 'Simulando el envío de un webhook a JIRA...'
                        // Aquí iría el comando para enviar el webhook a JIRA
                      }
                  }
                }
              }""".stripIndent())
          }
        }
      }
