jenkins:
  systemMessage: |
    Welcome to our build server.

    This Jenkins is 100% configured and managed 'as code'.
    Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin.
    JCasC config can be found in the jenkins.yaml file in the $JENKINS_HOME/casc/ folder.

    Some settings are still injected from init.groovy.d scripts,
    but these settings will be ported over to JCasC as support becomes available.
  # This is just a random example entry to show that there is no "end token" for 
  # the multiline string apart from un-indent to the next YAML property.
  numExecutors: 3
  scmCheckoutRetryCount: 5
  mode: NORMAL
  globalNodeProperties:
    - envVars:
        env: 
          - key: gitToken
            value: @@value@@
  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            description: "Jenkins administrators"
            permissions:
              - "Overall/Administer"
            entries:
              - user: "admin"
          - name: "readonly"
            description: "Read-only users"
            permissions:
              - "Overall/Read"
              - "Job/Read"
            entries:
              - user: "reader"
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "@@value@@"
        - id: "reader"
          password: "@@value@@"
jobs:
  - script: >
      folder('testjobs')
  - script: >
      pipelineJob('testjobs/default-agent') {
        definition {
          cps {
            script("""\
              pipeline {
                agent any
                stages {
                  stage('SHOW ENV') {
                    steps {
                      script {
                        env.each { key, value -> 
                        echo "${key}: ${value}"
                         }
                      }
                    }
                  }
                  stage('DOWNLOAD PRJ') {
                    steps {
                      git 'https://github.com/mvazgon/apibuilder.git'  // Reemplaza con la URL de tu repositorio
                    }
                  }   
                  stage('CHECK SONAR PRJ') {
                      steps {
                          echo 'Simulando el análisis con SONARQUBE...'
                          // Aquí iría el comando para analizar el código con SONARQUBE
                      }
                  }
                  stage('TEST UNIT PRJ') {
                      steps {
                          echo 'Simulando la ejecución de tests unitarios...'
                          // Aquí iría el comando para ejecutar los tests unitarios
                      }
                  }
                  stage('BUILD PRJ') {
                      steps {
                          echo 'Simulando la construcción de un ejecutable Java...'
                          // Aquí iría el comando para construir el ejecutable Java
                      }
                  }
                  stage('UPLOAD JAVA PRJ') {
                      steps {
                          echo 'Simulando la subida del ejecutable Java a un registro de objetos...'
                          // Aquí iría el comando para subir el ejecutable Java al registro de objetos
                      }
                  }
                  stage('REGISTER DONE') {
                    steps {
                        echo 'Simulando el envío de un webhook a JIRA...'
                        // Aquí iría el comando para enviar el webhook a JIRA
                      }
                  }
                }
              }""".stripIndent())
          }
        }
      }